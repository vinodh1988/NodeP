{"version":3,"sources":["Winner.js","App.js","serviceWorker.js","index.js"],"names":["Winner","className","this","props","winner","firstname","bornCountry","born","React","Component","App","getWinners","bind","state","winners","pattern","ReactDOM","findDOMNode","refs","value","Request","get","then","response","body","setState","catch","console","log","code","map","x","key","id","type","ref","onKeyUp","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAEaA,EAAb,iLAEQ,OACA,yBAAKC,UAAU,UACX,4BAAKC,KAAKC,MAAMC,OAAOC,WACvB,2BACI,2BAAIH,KAAKC,MAAMC,OAAOE,aAAgB,6BACtC,2BAAIJ,KAAKC,MAAMC,OAAOG,YAPtC,GAA4BC,IAAMC,WCuCnBC,G,kBAjCb,WAAYP,GAAO,IAAD,8BAChB,4CAAMA,KACDQ,WAAW,EAAKA,WAAWC,KAAhB,gBAChB,EAAKC,MAAM,CAACC,QAAQ,IAHJ,E,0EAML,IAAD,OACNC,EAAQC,IAASC,YAAYf,KAAKgB,KAAKH,SAASI,MACnDC,IAAQC,IAAI,qCAAqCN,GAASO,MAExD,SAACC,GACG,EAAKV,MAAMC,QAAQS,EAASC,KAC5B,EAAKC,SAAS,EAAKZ,UAGvBa,OACA,WAAKC,QAAQC,IAAI,c,+BAKnB,IAAIC,EAAK3B,KAAKW,MAAMC,QAAQgB,KAAI,SAACC,GAAD,OAChC,kBAAC,EAAD,CAAQC,IAAKD,EAAEE,GAAI7B,OAAQ2B,OAC1B,OACE,yBAAK9B,UAAU,QAAf,kBACmB,2BAAOiC,KAAK,OAAOC,IAAI,UAAUC,QAASlC,KAAKS,aAC7DkB,O,GA5BKrB,IAAMC,YCMJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNzB,IAAS0B,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.2dc6ecb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nexport class Winner extends React.Component{\r\n    render(){\r\n        return(\r\n        <div className=\"winner\">\r\n            <h3>{this.props.winner.firstname}</h3>\r\n            <p>\r\n                <i>{this.props.winner.bornCountry}</i><br/>\r\n                <b>{this.props.winner.born}</b>\r\n            </p>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM  from 'react-dom';\nimport Request from 'superagent';\nimport {Winner} from './Winner';\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.getWinners=this.getWinners.bind(this);\n    this.state={winners:[]}\n  }\n\n  getWinners(){\n    let pattern=ReactDOM.findDOMNode(this.refs.pattern).value;\n     Request.get(\"http://localhost:9999/winners/all/\"+pattern).then\n     (\n       (response)=>{\n           this.state.winners=response.body;\n           this.setState(this.state);\n\n       }\n     ).catch(\n       ()=>{console.log(\"error\")}\n     );\n  }\n\n  render(){\n     let code=this.state.winners.map((x)=>\n     <Winner key={x.id} winner={x}></Winner>);\n      return(\n        <div className=\"home\">\n            Search winner  <input type=\"text\" ref=\"pattern\" onKeyUp={this.getWinners}/>\n            {code}\n        </div>\n      );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}